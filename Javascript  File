document.addEventListener("DOMContentLoaded", () => {
    // DOM Elements
    const imgInput = document.getElementById("imageInput");
    const imgShow = document.getElementById("preview");
    const rUnit = document.getElementById("resizeUnit");
    const rwidth = document.getElementById("resizeWidth");
    const rpercent = document.getElementById("resizePercentage");
    const dimensions = document.getElementById("pixel-dimensions");
    const perdimension = document.getElementById("percentage-dimensions");
    const pxheight = document.getElementById("pixel-height-dimensions");
    const imgQuality = document.getElementById("quality");
    const qualValue = document.getElementById("quality-value");
    const resizeBtn = document.getElementById("resizeButton");
    const downloadBtn = document.getElementById("downloadButton");
    const imgDimensions = document.getElementById("image-dimensions");
    const action = document.getElementById("action-form");

    let imageResized = false;

    // Update quality value display
    const updateQualVal = () => {
        qualValue.innerText = imgQuality.value;
    };
    updateQualVal();
    imgQuality.addEventListener("input", updateQualVal);

    // Load and display image preview
    imgInput.addEventListener("change", () => {
        const imgFile = imgInput.files[0];
        const readFile = new FileReader();

        readFile.onload = (e) => {
            imgShow.src = e.target.result;
            showActionForm();
            showImageDim(imgFile);
        };
        readFile.readAsDataURL(imgFile);
    });

    // Show action form
    const showActionForm = () => {
        action.style.display = "block";
    };

    // Display image dimensions
    const showImageDim = (imgFile) => {
        const image = new Image();
        image.onload = () => {
            const width = image.width;
            const height = image.height;
            imgDimensions.innerText = Image Dimensions: ${width} x ${height} pixels;
        };
        image.src = URL.createObjectURL(imgFile);
    };

    // Show/hide dimension fields based on unit
    const dimFieldsShow = () => {
        if (rUnit.value === "pixels") {
            dimensions.style.display = "block";
            pxheight.style.display = "block";
            perdimension.style.display = "none";
        } else {
            dimensions.style.display = "none";
            pxheight.style.display = "none";
            perdimension.style.display = "block";
        }
    };
    rUnit.addEventListener("change", dimFieldsShow);

    // Update displayed dimensions
    const updateDimensions = () => {
        if (rUnit.value === "pixels") {
            imgDimensions.innerText = Image Dimensions: ${rwidth.value} x ${resizeHeight.value} pixels;
        } else {
            const percentage = parseInt(rpercent.value);
            if (!isNaN(percentage)) {
                const width = (imgShow.width * percentage) / 100;
                const height = (imgShow.height * percentage) / 100;
                imgDimensions.innerText = Image Dimensions: ${Math.round(width)} x ${Math.round(height)} pixels;
            }
        }
    };

    // Resize button functionality
    resizeBtn.addEventListener("click", () => {
        if (imageResized) {
            return;
        }

        let wid, height;

        if (rUnit.value === "percentage") {
            const percentage = parseInt(rpercent.value);
            if (isNaN(percentage) || percentage < 1 || percentage > 100) {
                alert("Please enter a valid percentage (1-100).");
                return;
            }
            wid = (imgShow.width * percentage) / 100;
            height = (imgShow.height * percentage) / 100;
            rwidth.value = wid;
            resizeHeight.value = height;
        } else {
            wid = parseInt(rwidth.value);
            height = parseInt(resizeHeight.value);
        }

        const imageQuality = parseInt(imgQuality.value) / 100;
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        const imageObj = new Image();

        imageObj.onload = () => {
            canvas.width = wid;
            canvas.height = height;
            ctx.drawImage(imageObj, 0, 0, wid, height);

            const resizedDataUrl = canvas.toDataURL("image/jpeg", imageQuality);
            const resizedImage = new Image();
            resizedImage.src = resizedDataUrl;

            imgShow.src = resizedDataUrl;
            downloadBtn.style.display = "inline-block";
            downloadBtn.href = resizedDataUrl;
            downloadBtn.download = "compressed-image.jpg";

            updateDimensions();
            imageResized = true;
        };
        imageObj.src = imgShow.src;
    });
});
